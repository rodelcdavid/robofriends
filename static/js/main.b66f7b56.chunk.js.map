{"version":3,"sources":["reportWebVitals.js","Card.js","CardList.js","SearchBox.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","className","alt","src","id","name","email","CardList","robots","cardArray","map","user","i","SearchBox","searchChange","placeholder","type","onChange","App","onSearchChange","event","setState","searchField","target","value","state","fetch","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCQCQ,EAbF,SAACC,GACV,OACA,sBAAKC,UAAU,4DAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,mBACrB,gCACI,6BAAKJ,EAAMK,OACX,4BAAIL,EAAMM,eCQPC,G,MAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,cAAC,EAAD,CAAyBR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,OAAvEE,EAAOI,GAAGR,OAG5B,OACA,qBAAKH,UAAY,WAAjB,SACKQ,MCIMI,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEhB,OACI,8BACI,uBACIb,UAAY,mCACZc,YAAc,gBACdC,KAAO,SACPC,SAAYH,OCyCbI,E,kDA3CX,aAAe,IAAD,8BACV,gBAORC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPrC,EAAKC,MAAQ,CACTjB,OAAQ,GACRc,YAAa,IAJP,E,qDAYlB,WAAqB,IAAD,OAChBI,MAAM,8CACLjC,MAAK,SAAAkC,GAAQ,OAAIA,EAASC,UAC1BnC,MAAK,SAAAoC,GAAK,OAAI,EAAKR,SAAS,CAACb,OAAQqB,S,oBAK1C,WAAU,IAAD,OACCC,EAAiBC,KAAKN,MAAMjB,OAAOwB,QAAO,SAAAC,GAC5C,OAAOA,EAAM5B,KAAK6B,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAIpE,OAAiC,IAA7BH,KAAKN,MAAMjB,OAAO4B,OAEd,yCAIA,sBAAKnC,UAAU,KAAf,UACI,0CACA,cAAC,EAAD,CAAWa,aAAciB,KAAKZ,iBAC9B,cAAC,EAAD,CAAUX,OAAUsB,W,GApClBO,a,MCGlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFC,SAASC,eAAe,SAM1BpD,M","file":"static/js/main.b66f7b56.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './Card.css'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n    <div className='tc w5 bg-light-green dib br3 pa3 ma2 grow ba bw1 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`}/>\r\n        <div>\r\n            <h3>{props.name}</h3>\r\n            <p>{props.email}</p>\r\n        </div>\r\n    \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n\r\n","import Card from './Card'\r\nimport './CardList.css'\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    const cardArray = robots.map((user, i) => {\r\n    return <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n    })\r\n\r\n    return (\r\n    <div className = 'cardlist'>\r\n        {cardArray}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default CardList;\r\n","const SearchBox = ({searchChange}) => {\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                placeholder = 'search robots'\r\n                type = 'search'\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import { Component } from \"react\"\r\nimport CardList from \"./CardList\"\r\n//import { robots } from \"./robots\"\r\nimport SearchBox from \"./SearchBox\"\r\n\r\nclass App extends Component {\r\n    constructor (){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\nonSearchChange = (event) => {\r\n    this.setState({searchField: event.target.value})\r\n}\r\n\r\ncomponentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots: users}));\r\n\r\n}\r\n\r\n\r\nrender() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\r\n    })\r\n\r\n    \r\n    if (this.state.robots.length === 0){\r\n        return (\r\n            <h1>Loading</h1>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className='tc'>\r\n                <h1>RoboCops</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <CardList robots = {filteredRobots}/>\r\n            </div>\r\n            )\r\n    }\r\n    }\r\n    \r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}